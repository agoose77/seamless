
Type AttractEasyPartnerInterface:
    ## form pdbfile.type = "file"
    ## form pdbfile.name = "Structure file"
    ResourceData_PDB pdbfile
    Enum moleculetype("Protein", "Peptide","DNA", "RNA") = "Protein"
    ## form moleculetype.name = "What kind of molecule are you docking?"
    Bool has_hydrogens = False
    ## form has_hydrogens.name = "The PDB file contains all necessary atoms, including polar hydrogens"

    *HaddockRestraintsInterface haddock_restraints
    ## form haddock_restraints.name = "Definition of residues for HADDOCK-type distance restraints (optional)"
    ## form haddock_restraints.auto_passive.type = None #TODO: disabled for now

    Integer ensemble_size = 0
    ## form ensemble_size.name = "If the PDB is a multi-model ensemble, specify the number of conformers"
    ## validate if ensemble_size != 0: assert ensemble_size >= 1

    Bool generate_modes = False
    Integer nr_modes = 5
    form:
        use_rmsd.name = "Perform RMSD analysis"
        generate_modes.name = "Generate harmonic modes"
        nr_modes.name = "Number of harmonic modes to select"
        nr_modes.type = "option"
        nr_modes.options = list(range(0,10+1))
        nr_modes.optiontitles = ["No modes"] + [str(v) for v in nr_modes.options[1:]]

    ## validate if generate_modes: assert nr_modes >= 1 and nr_modes <= 10

    Bool use_rmsd = False
    *ResourceData_PDB rmsd_pdb
    ## form rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")
    ## form rmsd_pdb.name = "RMSD PDB file"
    ## form rmsd_pdb.type = "file"
    validate:
        if ensemble_size > 1: assert generate_modes == False
        if not use_rmsd:
            assert rmsd_pdb is None
        else:
            assert rmsd_pdb is not None


Type AttractEasyModel:
    String runname = "attract"
    form:
        runname.add_header("Please supply a name for your docking run (one word)")
        runname.name = "Name of the docking run"

    AttractEasyPartnerInterfaceArray partners[2]
    form:
        partners.name = "Docking partners"
        partners[0].name = "Receptor"
        partners[1].name = "Ligand"
        partners[0].moleculetype.options = ("Protein",)
        partners[0].moleculetype.optiontitles = ("Protein",)

    validate:
        has_haddock = any([p.haddock_restraints for p in partners])
        nr_has_haddock = len([1 for p in partners if p.haddock_restraints])
        if has_haddock: assert nr_has_haddock == 2
        has_active = any([p.haddock_restraints.activereslist for p in partners if p.haddock_restraints])
        if has_haddock: assert has_active


